# Utilility functions for pileup SNPs
# Author: Yuanhua Huang
# Date: 22/08/2018

## TODO: samFile.fetch is more efficient, but may gives
## low quality reads, e.g., deletion or refskip

## Note, pileup is not the fastest way, fetch reads and deal 
## with CIGARs will be faster.

import pysam

VCF_HEADER = (
    '##fileformat=VCFv4.2\n'
    '##generated by pileup_pysam.py v0.1.4\n'
    '##FILTER=<ID=PASS,Description="All filters passed">\n'
    '##FORMAT=<ID=DP,Number=1,Type=int,Description="total counts for ALT and '
    'REF">\n'
    '##FORMAT=<ID=AD,Number=1,Type=int,Description="total counts for ALT">\n'
    '##FORMAT=<ID=OTH,Number=1,Type=int,Description="total counts for other '
    'bases from REF and ALT">\n'
    '##FORMAT=<ID=ALL,Number=5,Type=int,Description="total counts for all '
    'bases in order of A,C,G,T,N">\n')


def pileup_allele(samFile, chrom=None, start=None, stop=None, cell_tag="CR",
                  min_count=10, min_MAF=0.05, min_MAC=2, verbose=True, 
                  out_file=None):
    """Pileup allelic specific expression from a list of pysam objects
    """
    if type(samFile) == str:
        samFile = pysam.Samfile(samFile)
    if chrom != None:
        if chrom not in samFile.references:
            if chrom.startswith("chr"):
                chrom = chrom.split("chr")[1]
            else:
                chrom = "chr" + chrom
        if chrom not in samFile.references:
            print("Can't find references %s in samFile" %chrom)
            return None
    if out_file is not None:
        fid = open(out_file, "w")
        fid.writelines(VCF_HEADER)
    
    pos_counter = 0
    vcf_lines_all = []
    for pileupcolumn in samFile.pileup(contig=chrom, start=start, stop=stop):
        pos_counter += 1
        if verbose and pos_counter % 1000000 == 0:
            print("%s: %dM positions pileuped." %(chrom, pos_counter/1000000))
            
        if start is not None and pileupcolumn.pos < start: 
            continue
        if stop is not None and pileupcolumn.pos > stop: 
            continue
        if pileupcolumn.n < min_count:
            continue
            
        cell_dict = {}
        base_zero = {"A": 0, "C": 0, "G": 0, "T": 0, "N": 0}
        base_merg = {"A": 0, "C": 0, "G": 0, "T": 0, "N": 0}
        for pileupread in pileupcolumn.pileups:
            # query position is None if is_del or is_refskip is set.
            if pileupread.is_del or pileupread.is_refskip:
                continue
                
            #TODO: check reads quality
            _read = pileupread.alignment           
            _base = _read.query_sequence[pileupread.query_position - 1].upper()
            if cell_tag is not None:
                if _read.has_tag(cell_tag):
                    _tag = _read.get_tag(cell_tag)
                    if _tag not in cell_dict:
                        cell_dict[_tag] = base_zero.copy()
                    cell_dict[_tag][_base] = + 1                    
                else:
                    continue
            base_merg[_base] += 1

        base_sorted = sorted(base_merg, key=base_merg.__getitem__, reverse=True)
        REF = base_sorted[0]
        ALT = base_sorted[1]
        min_cnt_2nd = max(min_MAF * sum(base_merg.values()), min_MAC)        
        if sum(base_merg.values()) < min_count or base_merg[ALT] < min_cnt_2nd:
            continue
            
        for _tag in cell_dict.keys():
            line = get_vcf_line(cell_dict[_tag], pileupcolumn.reference_name, 
                                pileupcolumn.pos, REF, ALT, _tag)
            if out_file is None:
                vcf_lines_all.append(line)
            else:
                fid.writelines(line)
    
    if out_file is not None:
        fid.close()     
    return vcf_lines_all
            
def get_vcf_line(alleles, chrom, POS, REF, ALT, barcode=None):
    """Convert the counts for all bases into a vcf line
    """
    FORMAT = "AD:DP:OTH:ALL"
    REF_cnt = alleles[REF]
    ALT_cnt = alleles[ALT]
    OTH_cnt = sum(alleles.values()) - REF_cnt - ALT_cnt
    
    INFO = "." if barcode is None else "CR=%s" %(barcode)
    all_str = ",".join([str(alleles[x]) for x in ["A", "C", "G", "T", "N"]])
    cnt_lst = [str(ALT_cnt), str(REF_cnt+ALT_cnt), str(OTH_cnt)]
    outList = ":".join(cnt_lst + [all_str])
    
    
    vcf_line_val = [chrom, str(POS), ".", REF, ALT, ".", "PASS", INFO, 
                    FORMAT, outList]
    vcf_line = "\t".join(vcf_line_val) + "\n"
    
    return vcf_line
